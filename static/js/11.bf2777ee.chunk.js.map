{"version":3,"sources":["utils/validators/validators.js","components/common/form-controls/form-controls.js","components/index/register/register.js","components/index/register/register-container.js"],"names":["customFieldLevelValidation","value","validations","result","validation","required","undefined","maxLength","length","minLength","phone","match","email","positionsId","parseInt","photoSize","image","a","Promise","resolve","file","img","Image","onload","width","this","height","src","window","URL","createObjectURL","size","fileFormat","test","name","validateName","validateEmail","validatePhone","validatePositionId","validatePhoto","size_mb","FormControl","form","field","title","assistive","props","errors","touched","className","join","children","Input","type","placeholder","inputMode","File","ref","childref","onChange","event","setFieldValue","currentTarget","files","Radio","radio_controls","map","c","index","checked","id","ModalCongratulations","lazy","Register","register_button_status","register","positions","useState","congratulations","setCongratulations","photoRef","useRef","enableReinitialize","initialValues","position_id","photo","onSubmit","data","resetForm","current","handleSubmit","component","validate","Validators","values","fallback","closeCallback","scroller","scrollTo","duration","spy","smooth","React","memo","compose","connect","state"],"mappings":"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","file":"static/js/11.bf2777ee.chunk.js","sourcesContent":["const customFieldLevelValidation = (value, validations) => {\r\n    for (let validation of validations) {\r\n        const result = validation(value);\r\n\r\n        if (result)\r\n            return result;\r\n    }\r\n\r\n    return undefined;\r\n}\r\n\r\nconst required = (value) => {\r\n    return (!value) ? 'Field is required' : undefined; \r\n}\r\n\r\nconst maxLength = (length) => {\r\n    return (value) => {\r\n        return (value.length > length) ? `Max length is ${length}` : undefined;\r\n    }\r\n}\r\n\r\nconst minLength = (length) => {\r\n    return (value) => {\r\n        return (value.length < length) ? `Min length is ${length}` : undefined;\r\n    }\r\n}\r\n\r\nconst phone = (value) => {\r\n    let search = value.match(/^[\\+]{0,1}380([0-9]{9})$/);\r\n    return (!search) ? 'Wrong phone number' : undefined;\r\n}\r\n\r\nconst email = (value) => {\r\n    let search = value.match(/^(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])$/);\r\n    return (!search) ? 'Wrong email' : undefined;\r\n}\r\n\r\nconst positionsId = (value) => {\r\n    let _value = parseInt(value);\r\n    return (!_value)? 'Wrong position' : undefined; \r\n}\r\n\r\nconst photoSize = async (image) => {\r\n    let size = await new Promise(resolve => {\r\n        let file, img;\r\n        \r\n        if ((file = image)) {\r\n            img = new Image();\r\n\r\n            img.onload = function () {\r\n                resolve({\r\n                    width: this.width,\r\n                    height: this.height\r\n                })              \r\n            };\r\n\r\n            img.src = window.URL.createObjectURL(file);\r\n        }  \r\n    });\r\n\r\n    return (size.width < 70 || size.height < 70) ? 'Minimum size of photo 70x70px.' : undefined;\r\n}\r\n\r\nconst fileFormat = (file) => {\r\n    return ( /\\.(jpe?g)$/i.test(file.name) === false ) ? 'The photo format must be jpeg/jpg type.' : undefined;\r\n}\r\n\r\nconst fileWeight = (size_mb) => {\r\n    return (file) => {\r\n        let file_size = file.size / 1000000;\r\n        return (file_size > size_mb) ? `The photo size must not be greater than ${size_mb} Mb` : undefined;\r\n    }\r\n}\r\n\r\n// CUSTOM VALIDATORS\r\n\r\nexport const validateName = (value) => customFieldLevelValidation(value, [required, minLength(2), maxLength(60)]);\r\nexport const validateEmail = (value) => customFieldLevelValidation(value, [required, email, minLength(2), maxLength(100)]);\r\nexport const validatePhone = (value) => customFieldLevelValidation(value, [required, phone]);\r\nexport const validatePositionId = (value) => customFieldLevelValidation(value, [required, positionsId]);\r\nexport const validatePhoto = (value) => customFieldLevelValidation(value, [required, fileFormat, fileWeight(5), photoSize]);","import React from 'react';\r\n\r\nconst FormControl = ({form, field, title, assistive, ...props}) => {\r\n    let errors = form.errors[field.name];\r\n    let touched = form.touched[field.name];\r\n    \r\n    return (\r\n        <div className={['form__field', ((errors && touched) && 'field__error')].join(' ')}>\r\n            <p className={'field__title p1'}>\r\n                {title}\r\n            </p>\r\n\r\n            {\r\n                props.children\r\n            }\r\n\r\n            { \r\n                ((errors && touched) || assistive) &&\r\n                    <span className={'field__assistive'}>\r\n                        {\r\n                            (errors && touched) ?\r\n                                errors :\r\n                                assistive    \r\n                        }\r\n                    </span>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport const Input = (props) => {\r\n    return (\r\n        <FormControl {...props}>\r\n            <input className={'field__input'} {...props.field} type={props.type} placeholder={props.placeholder} inputMode={(props.inputMode || null)} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const File = (props) => {\r\n    return (\r\n        <FormControl {...props}>\r\n            <label className={['field__file', props.field.value && (props.field.value.name) && 'text'].join(' ')}>\r\n                <input ref={props.childref} type={'file'} className={'field__input'} {...props} onChange={(event) => {\r\n                    props.form.setFieldValue(props.field.name, event.currentTarget.files[0]);\r\n                }} />\r\n\r\n                <span value={props.field.value && (props.field.value.name) ? props.field.value.name : props.placeholder}  className={'field__file_browser'}>\r\n                </span>\r\n            </label>\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Radio = (props) => {\r\n    return (\r\n        <FormControl {...props}>\r\n            {\r\n                props.radio_controls.map((c, index) => {\r\n                    return (\r\n                        <label className={'field__radio'} key={index}>\r\n                            <input checked={props.value == c.id} {...props.field} type={'radio'} name={props.field.name} value={c.id}/>\r\n                            \r\n                            <p className={'p1'}>\r\n                                {c.name}\r\n                            </p>\r\n                        </label>\r\n                    )\r\n                })\r\n            }\r\n        </FormControl>\r\n    )\r\n}","import React, { useRef, useState, lazy, Suspense } from 'react';\r\nimport { scroller } from 'react-scroll';\r\nimport { Formik, Field } from 'formik';\r\n\r\nimport * as Validators from '../../../utils/validators/validators';\r\nimport {Input, Radio, File} from '../../../components/common/form-controls/form-controls';\r\n\r\nconst ModalCongratulations = lazy(() => import('../../modal/modal'));\r\n\r\nconst Register = ({register_button_status, register, positions}) => {\r\n\r\n    const [congratulations, setCongratulations] = useState(false);\r\n    const photoRef = useRef();\r\n\r\n    const initialValues = {\r\n        name: '', \r\n        email: '',\r\n        phone: '',\r\n        position_id: '',\r\n        photo: ''\r\n    }\r\n\r\n    const onSubmit = (data, {resetForm}) => {\r\n        const forceUpdate = () => {\r\n            photoRef.current.value = null;\r\n            resetForm();\r\n            setCongratulations(true);\r\n        }\r\n\r\n        register(data, forceUpdate);\r\n    }\r\n\r\n    return (\r\n        <section id={'register_container'} className={'register container'}>\r\n            <h1 className={'h1'}>\r\n                Register to get a work\r\n            </h1>\r\n\r\n            <div className={'register__min_container'}>\r\n                <p className={'p1 register__title'}>\r\n                    Attention! After successful registration and alert, update the list of users in the block from the top\r\n                </p>\r\n\r\n                <Formik className={'register__form'} enableReinitialize initialValues={{...initialValues}}  onSubmit={onSubmit}>\r\n                    {\r\n                        ({handleSubmit, ...props}) => (\r\n                            <form onSubmit={handleSubmit} name={'register'} className={'form'}> \r\n                                <Field title={'Name'} name={'name'} placeholder={'Your name'} component={Input} validate={Validators.validateName}/>\r\n                                <Field title={'Email'} name={'email'} placeholder={'Your email'} component={Input} validate={Validators.validateEmail}/>\r\n                                <Field title={'Phone number'} name={'phone'} placeholder={'+380 XX XXX XX XX'} inputMode={'tel'} assistive={'Enter a phone number in international format'} component={Input} validate={Validators.validatePhone}/>\r\n                                <Field value={props.values.position_id} title={'Select your position'} name={'position_id'} component={Radio} radio_controls={positions} validate={Validators.validatePositionId}/>\r\n                                <Field childref={photoRef} title={'Photo'} placeholder={'Upload your photo'} name={'photo'} component={File} validate={Validators.validatePhoto}/>\r\n\r\n                                <button type={'submit'} className={`form__send button_primary ${register_button_status}`}>\r\n                                    Sigh up Now\r\n                                </button>\r\n                            </form> \r\n                        )\r\n                    }\r\n                </Formik>\r\n            </div>\r\n\r\n            {\r\n                congratulations &&\r\n                <Suspense fallback={'Loading'}>\r\n                    <ModalCongratulations \r\n                        closeCallback={() => {\r\n                            scroller.scrollTo('users_container', {\r\n                                duration: 500,\r\n                                spy: true,\r\n                                smooth: true\r\n                            });\r\n                        }}\r\n                    />\r\n                </Suspense>\r\n            }\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default React.memo(Register);","import React from 'react';\r\nimport { compose } from 'redux';\r\nimport { connect } from 'react-redux';\r\n\r\nimport Register from './register';\r\nimport {register} from '../../../redux/register-reducer';\r\n\r\nconst RegisterContainer = ({register_button_status, register, positions}) => {\r\n  return (\r\n    <Register register_button_status={register_button_status} register={register} positions={positions}/>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        register_button_status: state.register.register_button_status,\r\n        positions: state.register.positions\r\n    }\r\n}\r\n\r\nexport default compose(\r\n    connect(mapStateToProps, {\r\n        register\r\n    })\r\n)(RegisterContainer);"],"sourceRoot":""}